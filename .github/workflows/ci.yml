name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: nightly
        components: rustfmt, clippy
        targets: wasm32-unknown-unknown
        
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
        
    - name: Install Node.js
      uses: actions/setup-node@v5
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: end2end/package-lock.json
        
    - name: Install cargo-leptos
      run: |
        if ! command -v cargo-leptos &> /dev/null; then
          echo "Installing cargo-leptos..."
          cargo install cargo-leptos --locked
        else
          echo "cargo-leptos is already installed"
        fi
      timeout-minutes: 30
      
    - name: Install Playwright browsers
      run: |
        cd end2end
        npm ci
        npx playwright install --with-deps
        
    - name: Run Rust tests
      run: cargo test --workspace
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY || 'test_key' }}
      
    - name: Run Rust clippy
      run: cargo clippy --workspace -- -D warnings
      
    - name: Run Rust fmt check
      run: cargo fmt --all -- --check
      
    - name: Run E2E tests
      run: |
        cd end2end
        npx playwright test
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY || 'test_key' }}
      timeout-minutes: 30

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    timeout-minutes: 60
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3.11.1
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ./Dockerfile.github
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY || 'test_key' }}

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Deploy to production
      run: |
        echo "üöÄ Deploying to production..."
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
        # „Åì„Åì„Å´ÂÆüÈöõ„ÅÆ„Éá„Éó„É≠„Ç§„Çπ„ÇØ„É™„Éó„Éà„ÇíËøΩÂä†
        # ‰æã: AWS ECS, Google Cloud Run, Azure Container Instances „Å™„Å©
